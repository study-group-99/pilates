name: comments

on:
  issue_comment:                                     
    types: [created, edited, deleted]

  # pull_request:

jobs:
  libft:
    if: contains(github.event.comment.html_url, '/pull/')
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.run.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup test files
        if: contains(github.event.comment.body, '/libft')
        run: |
          mkdir ${{ github.workspace }}/testdata/libft/pilates
          cp -a ${{ github.workspace }}/libft/. ${{ github.workspace }}/testdata/libft/pilates/
          ls ${{ github.workspace }}/testdata/libft/pilates
          rm ${{ github.workspace }}/testdata/libft/pilates/CMakeLists.txt
          cp ${{ github.workspace }}/libft/CMakeLists.txt.test ${{ github.workspace }}/testdata/libft/pilates/CMakeLists.txt
          cp ${{ github.workspace }}/libft/CMakeLists.txt.in ${{ github.workspace }}/testdata/libft/CMakeLists.txt.in
          cp ${{ github.workspace }}/libft/CMakeLists.txt ${{ github.workspace }}/testdata/libft/CMakeLists.txt
      - name: Build c++ tests
        if: contains(github.event.comment.body, '/libft')
        run: |
          cmake -S . -B build
          cmake --build build
        working-directory: ${{ github.workspace }}/testdata/libft
      - name: Run tests
        if: contains(github.event.comment.body, '/libft')
        id: run
        run: |
          REPORT="$(ctest --output-on-failure)"
          REPORT="${REPORT//'%'/'%25'}"
          REPORT="${REPORT//$'\n'/'%0A'}"
          REPORT="${REPORT//$'\r'/'%0D'}"
          echo "::set-output name=result::$REPORT"
        working-directory: ${{ github.workspace }}/testdata/libft/build
      # - name: Run tests
      #   if: contains(github.event.comment.body, '/libft')
      #   id: run
      #   run: |
      #     echo "::set-output name=result::test"
  libftcomment:
    runs-on: ubuntu-latest
    needs: libft
    steps:
      - uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GORELEASER}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{needs.libft.outputs.result}}
            })
